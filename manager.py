#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Jan 02, 2020 08:51:17 PM CST  platform: Windows NT

import sys
from PIL import Image, ImageTk

import manager_support
import os.path

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import manager_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    manager_support.set_Tk_var()
    top = Toplevel1 (root)
    manager_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    rt = root
    w = tk.Toplevel (root)
    manager_support.set_Tk_var()
    top = Toplevel1 (w)
    manager_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family 华文楷体 -size 16 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        font12 = "-family 华文楷体 -size 16 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        font13 = "-family 楷体 -size 22 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1004x771+544+149")
        top.minsize(152, 1)
        top.maxsize(1924, 1055)
        top.resizable(1, 1)
        top.title("管理员功能界面")
        top.configure(background="#d9d9d9")

        self.canvas = tk.Canvas(root, height=100, width=500)  # 创建画布
        self.image_file = tk.PhotoImage(file="D:\功能背景.gif")  # 加载图片文件
        self.image = self.canvas.create_image(0, 0, anchor='nw', image=self.image_file)  # 将图片置于画布上
        self.canvas.pack(side='top', fill='both', expand=1)  # 放置画布（为上端）
        root.attributes("-alpha", 0.9)

        self.Canvas1 = tk.Canvas(top)
        self.Canvas1.place(relx=0.12, rely=0.104, relheight=0.704, relwidth=0.76)

        self.Canvas1.configure(background="#FFFFF0")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")

        def a(*args):
            s = self.TCombobox1.get()
            if s == "导入学生信息":
                import daorustudent
                daorustudent.vp_start_gui()
            elif s =="按行添加学生信息":
                import addstudent
                addstudent.vp_start_gui()
            elif s == "查询学生信息":
                import querystudent
                querystudent.vp_start_gui()
            elif s == "导出学生信息":
                import daochustudent
                daochustudent.vp_start_gui()
        self.TCombobox1 = ttk.Combobox(self.Canvas1)
        self.TCombobox1.place(relx=0.118, rely=0.368, relheight=0.066
                , relwidth=0.258)
        self.TCombobox1.configure(textvariable=manager_support.combobox1)
        self.TCombobox1.configure(takefocus="")
        self.TCombobox1.configure(cursor="fleur")
        self.TCombobox1["values"] = ("导入学生信息","按行添加学生信息","查询学生信息","导出学生信息")
        self.TCombobox1["state"] = "readonly"
        self.TCombobox1.bind("<<ComboboxSelected>>",a)

        self.Label1 = tk.Label(self.Canvas1)
        self.Label1.place(relx=0.079, rely=0.203, height=86, width=255)
        self.Label1.configure(background="#FFFFF0")
        self.Label1.configure(cursor="fleur")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font10)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''学生信息管理模块''')

        self.Label1_1 = tk.Label(self.Canvas1)
        self.Label1_1.place(relx=0.55, rely=0.203, height=86, width=255)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(activeforeground="black")
        self.Label1_1.configure(background="#FFFFF0")
        self.Label1_1.configure(cursor="fleur")
        self.Label1_1.configure(disabledforeground="#a3a3a3")
        self.Label1_1.configure(font=font12)
        self.Label1_1.configure(foreground="#000000")
        self.Label1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1.configure(highlightcolor="black")
        self.Label1_1.configure(text='''成绩管理模块''')

        def a2(*args):
            s = self.TCombobox2.get()
            if s == "导入成绩信息":
                import daorugrade
                daorugrade.vp_start_gui()
            elif s =="添加成绩信息":
                import addgrade
                addgrade.vp_start_gui()
            elif s == "查询成绩信息":
                import querygrade
                querygrade.vp_start_gui()
            elif s == "导出成绩信息":
                import daochugrade
                daochugrade.vp_start_gui()
        self.TCombobox2 = ttk.Combobox(self.Canvas1)
        self.TCombobox2.place(relx=0.59, rely=0.368, relheight=0.066
                , relwidth=0.258)
        self.TCombobox2.configure(textvariable=manager_support.combobox2)
        self.TCombobox2.configure(takefocus="")
        self.TCombobox2.configure(values =["导入成绩信息","添加成绩信息","查询成绩信息","导出成绩信息"])
        self.TCombobox2["state"] = "readonly"
        self.TCombobox2.bind("<<ComboboxSelected>>",a2)

        self.Label1_3 = tk.Label(self.Canvas1)
        self.Label1_3.place(relx=0.092, rely=0.534, height=86, width=255)
        self.Label1_3.configure(activebackground="#f9f9f9")
        self.Label1_3.configure(activeforeground="black")
        self.Label1_3.configure(background="#FFFFF0")
        self.Label1_3.configure(disabledforeground="#a3a3a3")
        self.Label1_3.configure(font="-family {华文楷体} -size 16")
        self.Label1_3.configure(foreground="#000000")
        self.Label1_3.configure(highlightbackground="#d9d9d9")
        self.Label1_3.configure(highlightcolor="black")
        self.Label1_3.configure(text='''课程信息管理模块''')
        def a3(*args):
            s = self.TCombobox3.get()
            if s == "导入课程信息":
                import daoruclass
                daoruclass.vp_start_gui()
            elif s =="添加课程信息":
                import addclass
                addclass.vp_start_gui()
            elif s == "查询课程信息":
                import querycno
                querycno.vp_start_gui()
            elif s == "导出课程信息":
                import daochuclass
                daochuclass.vp_start_gui()
        self.TCombobox3 = ttk.Combobox(self.Canvas1)
        self.TCombobox3.place(relx=0.118, rely=0.718, relheight=0.066
                , relwidth=0.258)
        self.TCombobox3.configure(textvariable=manager_support.combobox3)
        self.TCombobox3.configure(takefocus="")
        self.TCombobox3["values"] = ("导入课程","添加课程信息","查询课程信息","导出课程信息")
        self.TCombobox3["state"] = "readonly"
        self.TCombobox3.bind("<<ComboboxSelected>>",a3)

        self.Label1_4 = tk.Label(self.Canvas1)
        self.Label1_4.place(relx=0.55, rely=0.534, height=86, width=255)
        self.Label1_4.configure(activebackground="#f9f9f9")
        self.Label1_4.configure(activeforeground="black")
        self.Label1_4.configure(background="#FFFFF0")
        self.Label1_4.configure(disabledforeground="#a3a3a3")
        self.Label1_4.configure(font="-family {华文楷体} -size 16")
        self.Label1_4.configure(foreground="#000000")
        self.Label1_4.configure(highlightbackground="#d9d9d9")
        self.Label1_4.configure(highlightcolor="black")
        self.Label1_4.configure(text='''用户信息管理模块''')

        def a4(*args):
            s1 = self.TCombobox4.get()
            if s1 == "添加用户":
                import regiester
                regiester.vp_start_gui()
            elif s1 == "删除用户":
                import deleteuser
                deleteuser.vp_start_gui()
            elif s1 == "查询用户":
                import querysuer
                querysuer.vp_start_gui()
            elif s1 == "更新用户":
                import updateuser
                updateuser.vp_start_gui()

        self.TCombobox4 = ttk.Combobox(self.Canvas1)
        self.TCombobox4.place(relx=0.59, rely=0.718, relheight=0.066
                , relwidth=0.258)
        self.TCombobox4.configure(textvariable=manager_support.combobox4)
        self.TCombobox4.configure(takefocus="")
        self.TCombobox4["values"] = ("添加用户","删除用户","查询用户","更新用户")
        self.TCombobox4["state"] = "readonly"
        self.TCombobox4.bind("<<ComboboxSelected>>",a4)

        self.Label2 = tk.Label(self.Canvas1)
        self.Label2.place(relx=0.236, rely=0.074, height=66, width=405)
        self.Label2.configure(background="#FFFFF0")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font=font13)
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''学生成绩管理系统''')

        self.Button1 = tk.Button(self.Canvas1)
        self.Button1.place(relx=0.38, rely=0.81, height=63, width=153)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(command=manager_support.logout)
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(font=font10)
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''退出登录''')

    @staticmethod
    def popup1(event, *args, **kwargs):
        Popupmenu1 = tk.Menu(root, tearoff=0)
        Popupmenu1.configure(activebackground="#f9f9f9")
        Popupmenu1.configure(activeborderwidth="1")
        Popupmenu1.configure(activeforeground="black")
        Popupmenu1.configure(background="#d9d9d9")
        Popupmenu1.configure(borderwidth="1")
        Popupmenu1.configure(disabledforeground="#a3a3a3")
        Popupmenu1.configure(font="{Microsoft YaHei UI} 9")
        Popupmenu1.configure(foreground="black")
        Popupmenu1.post(event.x_root, event.y_root)

if __name__ == '__main__':
    vp_start_gui()





